cronbach.alpha(hads[,c("D_enjoy", "D_laugh", "D_cheerful", "D_slow","D_appearance", "D_look_forward", "D_book")])#depression
#internal consistency of scales
cronbach.alpha(handedness[,c("writing", "throwing", "toothbrush", "spoon")])#handedness
library(eyeTrackR)
clc
library(dplyr)
data <- read.csv("C:\Users\htshp\Downloads\oasis_longitudinal_demographics.xlsx")
describe(data)
data <- read.csv("C:/Users/htshp/Downloads/oasis_longitudinal_demographics.xlsx")
describe(data)
View(data)
View(data)
data <- read.csv("C:/Users/htshp/Downloads/oasis_longitudinal_demographics.CSV")
View(data)
View(data)
data <- read.csv("C:\Users\htshp\OneDrive - iitgn.ac.in\Semester_3\Thesis\Codes\stats_94subjects_JASP.csv")
data <- read.csv("C:/htshp/OneDrive - iitgn.ac.in/Semester_3/Thesis/Codes/stats_94subjects_JASP.csv")
data <- read.csv("C:/Users/htshp/Desktop/stats_94subjects_JASP.csv")
head(data)
head(data)
data$PTID=as.factor(data$PTID)
head(data)
data$PTID=as.factor(data$PTID)
data$TimeStamp=as.factor(data$TimeStamp)
head(data)
data$PTID=as.factor(data$PTID)
data$TimeStamp=as.factor(data$TimeStamp)
model = aov(formula = Left.Lateral.Ventricle ~ time + Error(subject/time))
summary(model)
head(data)
data$PTID=as.factor(data$PTID)
data$TimeStamp=as.factor(data$TimeStamp)
model = aov(formula = Left.Lateral.Ventricle ~ time + Error(subject/time))
head(data)
data$PTID=as.factor(data$PTID)
data$TimeStamp=as.factor(data$TimeStamp)
model = aov(formula = Left-Lateral-Ventricle ~ time + Error(subject/time))
head(data)
data$PTID=as.factor(data$PTID)
data$TimeStamp=as.factor(data$TimeStamp)
model = aov(formula = Right.Cerebellum.White.Matter ~ time + Error(subject/time))
head(data)
data$PTID=as.factor(data$PTID)
data$TimeStamp=as.factor(data$TimeStamp)
model = aov(formula = EstimatedTotalIntraCranialVol ~ time + Error(subject/time))
data <- read.csv("C:/Users/htshp/Desktop/stats_94subjects_JASP.csv")
data$PTID=as.factor(data$PTID)
data$TimeStamp=as.factor(data$TimeStamp)
model = aov(formula = EstimatedTotalIntraCranialVol ~ time + Error(subject/time))
rm(list=ls()) #removes all previously storerd variables
library(Hmisc)
library(tiddyverse)
library(ggpubr)
library(rstatix)
library(reshape)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(reshape)
install.packages("ggpubr", repos = "https://cloud.r-project.org/", dependencies = TRUE)
load_data = read.csv("C:\Users\htshp\Desktop\stats_94subjects_JASP.csv")
```
load_data = read.csv("C:\Users\htshp\Desktop\stats_94subjects_JASP.csv")
```{r}
load_data <- read.csv("C:\Users\htshp\Desktop\stats_94subjects_JASP.csv")
load_data <- read.csv("C:/Users/htshp/Desktop/stats_94subjects_JASP.csv")
load_data
load_data %>%
group_by(TimeStamp) %>%
get_summary_stats(type = "mean_sd")
bxp <- ggboxplot(longdata, x="TimeStamp",y="Right-Hippocampus",add="point",color="true")
library(tidyverse)
library(ggpubr)
library(rstatix)
library(reshape)
bxp <- ggboxplot(longdata, x="TimeStamp",y="Right-Hippocampus",add="point",color="true")
bxp <- ggboxplot(load_data, x="TimeStamp",y="Right-Hippocampus",add="point",color="true")
bxp
bxp <- ggboxplot(load_data, x="TimeStamp",y="Right.Hippocampus",add="point",color="true")
bxp
bxp <- ggboxplot(load_data, x="TimeStamp",y="Right.Hippocampus",add="point",color="time")
bxp
bxp <- ggboxplot(load_data, x="TimeStamp",y="Right.Hippocampus",add="point",color="TimeStamp")
bxp
bxp <- ggboxplot(load_data, x="TimeStamp",y="Right.Hippocampus,Left.Hippocampus",add="point",color="TimeStamp")
bxp
bxp <- ggboxplot(load_data, x="TimeStamp",y="Right.Hippocampus",add="point",color="TimeStamp")
bxp
```{r}
```{r}
bxp <- ggboxplot(load_data, x="TimeStamp",y="Left.Hippocampus",add="point",color="TimeStamp")
bxp
```{r}
load_data %<%
group_by(timestamp) %>%
shapiro_test(Right.Hippocampus)
load_data %<%
group_by(timestamp) %<%
shapiro_test(Right.Hippocampus)
load_data %>%
group_by(timestamp) %>%
shapiro_test(Right.Hippocampus)
load_data %>%
group_by(TimeStamp) %>%
shapiro_test(Right.Hippocampus)
load_data %>%
group_by(TimeStamp) %>%
shapiro_test()
load_data %>%
group_by(TimeStamp) %>%
shapiro_test(ls())
load_data %>%
group_by(TimeStamp) %>%
shapiro_test(ls())
```{r}
apply(load_data,2,shapiro.test)
apply(load_data,shapiro.test)
apply(load_data,2,shapiro.test)
View(load_data)
View(load_data)
for (i in 8:71){print(shapiro.test(load_data[,i]))}
get_anova_table(res.aov)
res.aov <- anova_test(data=load_data,dv=Right.Hippocampus,wid=id,within = TimeStamp)
View(load_data)
View(load_data)
res.aov <- anova_test(data=load_data,dv=Right.Hippocampus,wid=X,within = TimeStamp)
res.aov <- anova_test(data=load_data,dv=Right.Hippocampus,wid=X,within = TimeStamp)
'''{r}
```{r}
install.packages("shiny")
install.packages("learnr")
# Load necessary libraries
library(dplyr)   # For data manipulation
# Load necessary libraries
library(dplyr)   # For data manipulation
library(ggplot2) # For visualization
# Import data from CSV file
data <- read.csv"C:/Users/htshp/OneDrive - Indian Institute of Science/CBR/Anemia and Cognition/SANSCOG_Trimmed_Characteristics_5_ExcludedSubjects.csv", stringsAsFactors = FALSE)
# Import data from CSV file
data <- read.csv("C:/Users/htshp/OneDrive - Indian Institute of Science/CBR/Anemia and Cognition/SANSCOG_Trimmed_Characteristics_5_ExcludedSubjects.csv", stringsAsFactors = FALSE)
attach(data)
View(data)
# Import data from CSV file
df <- read.csv("C:/Users/htshp/OneDrive - Indian Institute of Science/CBR/Anemia and Cognition/SANSCOG_Trimmed_Characteristics_5_ExcludedSubjects.csv", stringsAsFactors = FALSE)
attach(df)
View(df)
# Convert categorical predictor to a factor
df$Anemia_Status <- as.factor(df$Anemia_Status)
# Convert categorical predictor to a factor
df$Anemia_Status <- as.factor(df$Anemia_Status)
df$Gender.Code <- as.factor(df$Gender.Code)
df$Age.Code <- as.factor(df$Age.Code)
df$Smoking.Code <- as.factor(df$Smoking.Code)
df$Alcohol.Code <- as.factor(df$Alcohol.Code)
df$GDS.Classification.Code <- as.factor(df$GDS.Classification.Code)
df$HTN.his...bp.Code <- as.factor(df$HTN.his...bp.Code)
df$DM.his...fbs.Code <- as.factor(df$DM.his...fbs.Code)
df$SES_Mod2 <- as.factor(df$SES_Mod2)
View(df)
View(df)
# Perform linear regression
model <- lm( HMSE ~ Anemia_Status, data = data)
# Print the summary of the regression model
summary(model)
# Visualize the model
ggplot(data, aes(x = continuous_pred, y = outcome, color = categorical_pred)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Continuous Predictor", y = "Outcome", color = "Categorical Predictor")
# Perform linear regression
model <- lm( HMSE ~ Anemia_Status + Gender.Code, data = data)
# Print the summary of the regression model
summary(model)
# Perform linear regression
model <- lm( HMSE ~ Anemia_Status + Age, data = data)
# Print the summary of the regression model
summary(model)
# Visualize the model
ggplot(data, aes(x = Age, y = HMSE, color = Anemia_Status)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "AGE", y = "HMSE", color = "Anemia")
# Visualize the model
ggplot(data, aes(x = Age, y = HMSE)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "AGE", y = "HMSE", color = "Anemia")
# Visualize the model
ggplot(data, aes(x = Age, y = HMSE, color = Anemia_Status)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "AGE", y = "HMSE", color = "Anemia")
# Visualize the model
ggplot(data, aes(x = Age, y = HMSE, group = Anemia_Status, color = Anemia_Status)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "AGE", y = "HMSE", color = "Anemia")
# Visualize the model
ggplot(data, aes(x = Age, y = HMSE, group = Anemia_Status, color = Anemia_Status)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = color_mapping) +
labs(x = "AGE", y = "HMSE", color = "Anemia")
# Specify custom colors for the levels
color_mapping <- c("0" = "red", "1" = "blue")
# Visualize the model
ggplot(data, aes(x = Age, y = HMSE, group = Anemia_Status, color = Anemia_Status)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = color_mapping) +
labs(x = "AGE", y = "HMSE", color = "Anemia")
# Load necessary libraries
library(dplyr)   # For data manipulation
library(ggplot2) # For visualization
# Import data from CSV file
df <- read.csv("C:/Users/htshp/OneDrive - Indian Institute of Science/CBR/Anemia and Cognition/SANSCOG_Trimmed_Characteristics_5_ExcludedSubjects.csv", stringsAsFactors = FALSE)
attach(df)
View(df)
# Convert categorical predictor to a factor
df$Anemia_Status <- as.factor(df$Anemia_Status)
df$Gender.Code <- as.factor(df$Gender.Code)
df$Age.Code <- as.factor(df$Age.Code)
df$Smoking.Code <- as.factor(df$Smoking.Code)
df$Alcohol.Code <- as.factor(df$Alcohol.Code)
df$GDS.Classification.Code <- as.factor(df$GDS.Classification.Code)
df$HTN.his...bp.Code <- as.factor(df$HTN.his...bp.Code)
df$DM.his...fbs.Code <- as.factor(df$DM.his...fbs.Code)
df$SES_Mod2 <- as.factor(df$SES_Mod2)
# Perform linear regression
model <- lm( HMSE ~ Anemia_Status + Age, data = data)
# Print the summary of the regression model
summary(model)
# Specify custom colors for the levels
color_mapping <- c("0" = "red", "1" = "blue")
# Visualize the model
ggplot(data, aes(x = Age, y = HMSE, group = Anemia_Status, color = Anemia_Status)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = color_mapping) +
labs(x = "AGE", y = "HMSE", color = "Anemia")
# Visualize the model
ggplot(data, aes(x = Age, y = HMSE,color = Anemia_Status)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
scale_color_manual(values = color_mapping) +
labs(x = "AGE", y = "HMSE", color = "Anemia")
# Create a box plot
ggplot(data, aes(x = Anemia_Status, y = HMSE, fill = Anemia_Status)) +
geom_boxplot() +
labs(x = "Group", y = "HMSE Score", title = "Distribution of HMSE Score by Group") +
theme_minimal()
# Create a box plot
ggplot(data, aes(x = Anemia_Status, y = HMSE, fill = Anemia_Status)) +
geom_boxplot() +
labs(x = "Group", y = "HMSE Score", title = "Distribution of HMSE Score by Group") +
theme_minimal() +
theme(
plot.width = 8, # Set the width of the plot
plot.height = 6 # Set the height of the plot
)
# Create a box plot
ggplot(data, aes(x = Anemia_Status, y = HMSE, fill = Anemia_Status)) +
geom_boxplot() +
labs(x = "Group", y = "HMSE Score", title = "Distribution of HMSE Score by Group") +
theme_minimal() +
theme(
plot.width = 8, # Set the width of the plot
plot.height = 6 # Set the height of the plot
)
# Create a box plot
ggplot(data, aes(x = Anemia_Status, y = HMSE, fill = Anemia_Status)) +
geom_boxplot() +
labs(x = "Group", y = "HMSE Score", title = "Distribution of HMSE Score by Group") +
theme_minimal()
# Set the plot size using ggsave
ggsave("boxplot.png", plot, width = 8, height = 6)
# Create a box plot
ggplot(data, aes(x = Anemia_Status, y = HMSE, fill = Anemia_Status)) +
geom_boxplot() +
labs(x = "Group", y = "HMSE Score", title = "Distribution of HMSE Score by Group") +
theme_minimal()
install.packages("devtools")
devtools::install_github("s4rify/fastdm-plot", subdir = "FastDMPlot")
setwd("D:\\fast-dm\\fast-dm_example_1")
setwd("C:\\Users\\htshp\\Downloads\\Compressed\\fast-dm-main\\fast-dm-main\\examples\\fast-dm_example_1\\example 1.R")
shiny::runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
input$target_var
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
shiny::runApp('E:/Kaggle/baseline-tables/temp')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
install.packages("officer")
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/temp')
runApp('E:/Kaggle/baseline-tables/temp')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
library(officer)
# autonum for caption
autonum <- run_autonum(seq_id = "tab", bkm = "mtcars")
ftab <- flextable(head(mtcars))
ftab <- set_caption(ftab, caption = "mtcars data", autonum = autonum)
ftab <- autofit(ftab)
doc <- read_docx()
doc <- body_add_flextable(doc, value = ftab)
fileout <- tempfile(fileext = ".docx")
# fileout <- "test.docx" # uncomment to write in your working directory
print(doc, target = fileout)
# fileout <- "test.docx" # uncomment to write in your working directory
print(fileout)
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
runApp('E:/Kaggle/baseline-tables/baseline-characteristics')
shiny::runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/scripts')
runApp('E:/Kaggle/Baseline-Characteristics/shiny')
runApp('E:/Kaggle/Baseline-Characteristics/shiny')
